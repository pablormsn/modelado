model redMetropolitana

class Clock
attributes
NOW : Integer
end

class Linea
attributes
Nombre : String
end

class Estacion
attributes
Nombre : String 
end

class Tren
attributes
Direccion : Estacion
end

class Via
attributes
Direccion : Estacion
end

associationclass Segmento between
Estacion [*] role estacion1 
Estacion [*] role estacion2 
attributes
Nombre: String
end

aggregation Transcurrencia between
Linea [1..*] role linea
Segmento [1..*] role segmentos
end

composition Vias between
Segmento [1] role segmento
Via [2] role via
end

association Circulacion between
Tren [1] role tren
Via [0..1] role via
end

association Parada between
Tren [*] role tren
Estacion [0..1] role estacion
end

association Ruta between
Tren [*] role tren
Linea [1] role linea
end

association Time between
Clock [1] role clock
Linea [1..*] role linea
end

constraints

context Clock
inv OnlyOneClock:
    Clock.allInstances()->size() = 1

context Segmento
inv NoConectadaConsigoMisma:
    self.estacion1 <> self.estacion2

--context Linea
--inv SegmentosEnLineasDistintas:
  --  self.segmentos->forAll(s1 |
    --   self.segmentos->exists(s2 |
      --      s1 <> s2 and s1.estacion1 = s2.estacion1 and s1.estacion2 = s2.estacion2
     --   )
  --  )

context Linea 
inv DiferentesLineas:
    Linea.allInstances() -> excluding(self) -> forAll(x | x.segmentos <> self.segmentos)


context Segmento 
inv DiferenteDireccionVia:
    self.via -> forAll(x | 
        self.via -> forAll(y | y <> x implies x.Direccion <> y.Direccion))

context Via
inv UnSoloTrenEnVia:
    self.tren->size() <= 1

