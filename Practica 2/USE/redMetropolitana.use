model redMetropolitana

class Clock
attributes
NOW : Integer
end

class Linea
attributes
Nombre : String
end

class Estacion
attributes
Nombre : String 
end

class Tren
attributes
Direccion : Boolean
end

class Via
attributes
Direccion : Boolean
end

class Segmento 
attributes
Nombre: String
end

aggregation Pertenece between
Linea [1..*] role linea
Segmento [1..*] role segmentos
end

composition Vias between
Segmento [1] role segmento
Via [2] role vias
end

association Circulacion between
Tren [1] role tren
Via [0..1] role via
end

association Parada between
Tren [*] role tren
Estacion [0..1] role estacion
end

association Ruta between
Tren [*] role tren
Linea [1] role linea
end

association Time between
Clock [1] role clock
Linea [1..*] role linea
end

association Destino between
Estacion [1] role estacionOrigen
Via [1..*] role viaDestino
end

association Origen between
Estacion [1] role estacionDestino
Via [1..*] role viaOrigen
end

constraints

context Clock
inv OnlyOneClock:
    Clock.allInstances()->size() = 1

context Segmento
inv NoConectadaConsigoMisma:
    self.vias.estacionDestino <> self.vias.estacionOrigen

--context Estacion 
--inv SegmentosEnLineasDistintas:
   -- self.viaOrigen.segmento.linea->intersection(self.viaDestino.segmento.linea)->isEmpty()

context Linea 
inv DiferentesLineas:
    Linea.allInstances() -> excluding(self) -> forAll(x | x.segmentos <> self.segmentos)


context Segmento 
inv DiferenteDireccionVia:
    self.vias -> forAll(x | 
        self.vias -> forAll(y | y <> x implies x.Direccion <> y.Direccion))

context Via
inv UnSoloTrenEnVia:
    self.tren->size() <= 1

context Tren
inv EstacionXORVia:
    (self.estacion -> isEmpty() or self.via -> isEmpty()) and
    not (self.estacion -> isEmpty() and self.via -> isEmpty())
